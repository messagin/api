openapi: 3.0.0

info:
  title: Messagin' API
  version: 1.0.0
  description: No API description (WIP)
  contact:
    email: contact@webd3vs.xyz
    name: webd3vs
    url: https://webd3vs.xyz
externalDocs:
  url: https://docs.webd3vs.xyz
servers:
  - url: https://api.webd3vs.xyz
    description: Official Server
tags:
  - name: users
  - name: spaces
  - name: invites
  - name: chats
  - name: messages
  - name: members
  - name: relations
paths:
  /users/self:
    get:
      description: "Get the current user. All fields included."
      security:
        - Auth: []
      tags:
        - users
      summary: Get current user
      operationId: getCurrentUser
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 067YH1EPTW000000
                flags: 0
                username: john.doe
                name: null
                email: john.doe@example.com
                phone: null
                created_at: "2000-01-01T00:00:00.000Z"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    put:
      description: "Update the current user's settings"
      security:
        - Auth: []
      tags:
        - users
      summary: Update user
      operationId: updateUser
      requestBody:
        $ref: "#/components/requestBodies/UpdataUserPassword"
      responses:
        "204":
          description: Successful response
        "400":
          description: Bad request
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    delete:
      description: "Delete the current user. Note that a deletion request may take up to one week. An account will also be able to be restored, but some settings and past messages will be lost"
      security:
        - Auth: []
      tags:
        - users
      summary: Delete user
      operationId: deleteUser
      responses:
        "200":
          description: Successful response
  /users/self/password:
    put:
      description: "Update the current user's password"
      security:
        - Auth: []
      tags:
        - users
      summary: Update user password
      operationId: updatePassword
      responses:
        "200":
          description: Successful response
  /users/self/mfa/validate:
    post:
      description: "Validates MFA. Not implemented yet."
      tags:
        - users
      summary: Validate MFA
      operationId: validateMfa
      responses:
        "200":
          description: Successful response
  /users/try:
    post:
      description: "Create a temporary user with no email address. Usable for up to one week. Limited service access"
      tags:
        - users
      summary: Create trial user
      operationId: createTrialUser
      responses:
        "200":
          description: Successful response
  /users/signup:
    post:
      description: "Creates a new user. Requires an email address, a username and a password"
      tags:
        - users
      summary: Sign up user
      operationId: signUpUser
      responses:
        "200":
          description: Successful response
  /users/authenticate:
    post:
      description: "Authenticates a user or a bot. Requires a username/email and password or a bot token."
      tags:
        - users
      summary: Authenticate user
      operationId: authenticateUser
      responses:
        "200":
          description: Successful response
  /users/{user_id}:
    get:
      description: "Gets a user by his ID. Only public fields will be sent even if it's the current user."
      security:
        - Auth: []
      tags:
        - users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Successful response
  /spaces:
    get:
      description: "Lists current user's spaces"
      security:
        - Auth: []
      tags:
        - spaces
      summary: List user spaces
      operationId: listUserSpaces
      responses:
        "200":
          description: Successful response
    post:
      description: "Create a new space. Note that a user can own up to 3 spaces."
      security:
        - Auth: []
      tags:
        - spaces
      summary: Create new space
      operationId: createSpace
      responses:
        "200":
          description: Successful response
  /spaces/{space_id}:
    get:
      description: "Get a user's space. Can also be used to access public spaces's information."
      security:
        - Auth: []
      tags:
        - spaces
      summary: Get space
      operationId: getSpace
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    delete:
      description: "Delete a space. Can only be used by the owner."
      security:
        - Auth: []
      tags:
        - spaces
      summary: Delete space
      operationId: deleteSpace
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /spaces/{space_id}/invites:
    get:
      description: "List a space's invites."
      security:
        - Auth: []
      tags:
        - invites
      summary: Get invites
      operationId: getInvites
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    post:
      description: "Create a new invite for the space."
      security:
        - Auth: []
      tags:
        - invites
      summary: Create invite
      operationId: createInvite
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /invites/{invite_id}:
    post:
      description: "Accept an invite and join the space associated with it."
      security:
        - Auth: []
      tags:
        - invites
      summary: Accept invite
      operationId: acceptInvite
      parameters:
        - name: invite_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    get:
      description: "Get an invite's information"
      security:
        - Auth: []
      tags:
        - invites
      summary: Get invite
      operationId: getInvite
      parameters:
        - name: invite_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    delete:
      description: "Delete an invite"
      security:
        - Auth: []
      tags:
        - invites
      summary: Delete invite
      operationId: deleteInvite
      parameters:
        - name: invite_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /spaces/{space_id}/members:
    get:
      description: "List a space's members. Not implemented for big spaces yet."
      security:
        - Auth: []
      tags:
        - members
      summary: List members
      operationId: listMembers
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /spaces/{space_id}/members/{member_id}:
    get:
      description: "Get a space member's info"
      security:
        - Auth: []
      tags:
        - members
      summary: Get member
      operationId: getMember
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
        - name: member_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /spaces/{space_id}/chats:
    get:
      description: "Lists all chats in a space. Note that some chats may be excluded due to permissions"
      security:
        - Auth: []
      tags:
        - chats
      summary: List chats
      operationId: listChats
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    post:
      description: "Create a new chat in a space. Only owners are allowed to use it at this point"
      security:
        - Auth: []
      tags:
        - chats
      summary: Create chat
      operationId: createChat
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /chats/{chat_id}:
    get:
      description: "Get a chat, be it in a space or direct messages."
      security:
        - Auth: []
      tags:
        - chats
      summary: Get chat
      operationId: getChat
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    patch:
      description: "Updates a chat. Requires permissions in a space or ownership of a group."
      security:
        - Auth: []
      tags:
        - chats
      summary: Update chat
      operationId: updateChat
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    delete:
      description: "Delete a chat. Requires permissions in a space or ownership in a group. Can also be used to close a DM, messages will be kept."
      security:
        - Auth: []
      tags:
        - chats
      summary: Delete chat
      operationId: deleteChat
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /chats/{chat_id}/messages:
    get:
      description: "List messages in a chat."
      security:
        - Auth: []
      tags:
        - messages
      summary: List messages
      operationId: listMessages
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    post:
      description: "Create a new message."
      security:
        - Auth: []
      tags:
        - messages
      summary: Create message
      operationId: createMessage
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /chats/{chat_id}/messages/search:
    get:
      description: "Search for messages. Query is case-sensitive and using exact matching. Cannot be used on encrypted chats"
      security:
        - Auth: []
      tags:
        - messages
      summary: Search for messages
      operationId: searchMessages
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
                example:
                  - id: "069GS2P9F400A000"
                    chat_id: "069FFR7SMR002001"
                    user:
                      id: "069ETGF468006000"
                      username: "john.doe"
                    content: "New message!"
                    flags: 0
                    updated_at: null
                    created_at: "2024-11-08T16:10:42.425Z"
                  - id: "069FFR9MK0002002"
                    chat_id: "069FFR7SMR002001"
                    user:
                      id: "069ETGF468006000"
                      username: "john.doe"
                    content: "This is a message."
                    flags: 0
                    updated_at: null
                    created_at: "2024-11-04T15:53:04.408Z"
  /chats/{chat_id}/messages/{message_id}:
    get:
      description: "Get a message by ID. For a user, prefer listing messages instead."
      security:
        - Auth: []
      tags:
        - messages
      summary: Get message
      operationId: getMessage
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - name: message_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
              example:
                id: "069FFR9MK0002002"
                chat_id: "069FFR7SMR002001"
                user:
                  id: "069ETGF468006000"
                  username: "john.doe"
                content: "This is a message."
                flags: 0
                updated_at: null
                created_at: "2024-11-04T15:53:04.408Z"
    patch:
      description: "Update a message. Cannot be used on encrypted messages yet."
      security:
        - Auth: []
      tags:
        - messages
      summary: Update message
      operationId: updateMessage
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
    delete:
      description: "Delete a message. Only the message's sender can use this for now."
      security:
        - Auth: []
      tags:
        - messages
      summary: Delete message
      operationId: deleteMessage
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
  /users/self/relations:
    get:
      description: "List user's relations. That includes friends, pending requests and blocked users"
      security:
        - Auth: []
      tags:
        - relations
      summary: List relations
      operationId: listRelations
      responses:
        "200":
          description: Successful response
    post:
      description: "Add a new friend. Deprecated, use `PUT /users/self/relations/{user_id}/` instead."
      security:
        - Auth: []
      tags:
        - relations
      summary: Add friend
      operationId: addFriend
      responses:
        "200":
          description: Successful response

  /users/self/relations/{user_id}:
    get:
      description: "Gets your relationship with a user."
      security:
        - Auth: []
      tags:
        - relations
      summary: Get friend
      operationId: getFriend
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Successful response
    delete:
      description: "Delete your relationship with a user. Deprecated, use `PATCH /users/self/relations/{user_id}` instead."
      security:
        - Auth: []
      tags:
        - relations
      summary: Remove friend
      operationId: removeFriend
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response

components:
  responses:
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: Authentication token is malformed
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: An internal error occurred. Please try again later

  securitySchemes:
    Auth:
      type: apiKey
      in: header
      name: Authorization

  requestBodies:
    UpdataUserPassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              old_password:
                type: string
                format: password
              new_password:
                type: string
                format: password
            required:
              - old_password
              - new_password
  schemas:
    ID:
      type: string
      pattern: "^[0-9A-HJKMNP-TV-Z]{16}$"
    Username:
      type: string
      format: username
      minLength: 2
      maxLength: 32
    Timestamp:
      type: string
      pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
    TimestampOrNull:
      nullable: true
      type: string
      pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        flags:
          type: number
        username:
          $ref: "#/components/schemas/Username"
        name:
          type: string
          nullable: true
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        created_at:
          $ref: "#/components/schemas/Timestamp"
    PartialUser:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        username:
          $ref: "#/components/schemas/Username"
    Message:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        chat_id:
          $ref: "#/components/schemas/ID"
        user:
          $ref: "#/components/schemas/PartialUser"
        content:
          type: string
        flags:
          type: number
        updated_at:
          $ref: "#/components/schemas/TimestampOrNull"
        created_at:
          $ref: "#/components/schemas/Timestamp"
